#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

//noinspection GroovyAssignabilityCheck
properties([
        parameters([
                choice(name: 'ENVIRONMENT', choices: 'saat\nsprod\nsandbox', description: 'Environment where code should be build and deployed')
        ])
])

def product = "ccpay-functions"
def component = "node"
def environment = params.ENVIRONMENT
def subscription = 'sandbox'

echo "Building '${product}-${component}' in '${environment}'"

List<LinkedHashMap<String, Object>> secrets = [
        secret('payment-s2s-secret', 'S2S_KEY_PAYMENT_APP')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

node {
    env.PATH = "$env.PATH:/usr/local/bin"
    stage('Checkout') {
        deleteDir()
        checkout scm
    }
    stage('Build') {
        yarn("--mutex network install")
    }
    withParameterizedPipeline(params.TYPE, params.PRODUCT_NAME, params.APP, params.ENVIRONMENT, params.SUBSCRIPTION) {
        after('build') {
            sh 'yarn ng:build'
        }
        loadVaultSecrets(secrets)
    }
    withSubscription(subscription) {
           withIlbIp(environment) {
               spinInfra(product, component, environment, false, subscription)
               scmServiceRegistration(environment)
           }
           deployStage(product, component, environment, subscription)
       }
}

def deployStage(product, component, environment, subscription) {
    stage("Deploy Functions") {
        def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }
        def serviceName = "${product}-${component}-${environment}"
        def result = az "functionapp deployment list-publishing-profiles --name ${serviceName} --resource-group ${serviceName} --query \"[?publishMethod=='MSDeploy'].{publishUrl:publishUrl,userName:userName,userPWD:userPWD}|[0]\""
        def profile = readJSON text: result
        def uri = "${profile.userName}:${profile.userPWD}@${profile.publishUrl}"
        sh "bash uploadSource.sh ${serviceName} functions https://\\${uri}"
    }
}

def yarn(task) {
    sh "cd functions"
    sh("yarn ${task}")
    sh "cd .."
}